// Generated by CoffeeScript 1.10.0
(function() {
  var DeleteServer, PostServer, Promise, PutServer, Start, Stop, Update, Validate, assert, diff, getPromise, needle, removeItem, schema_HAProxy, utils, validate;

  validate = require('json-schema').validate;

  assert = require('assert');

  Promise = require('bluebird');

  needle = Promise.promisifyAll(require('needle'));

  utils = require('utils')._;

  diff = require('deep-diff').diff;

  schema_HAProxy = require('./schema');

  getPromise = function() {
    return new Promise(function(resolve, reject) {
      return resolve();
    });
  };

  removeItem = function(list, id) {
    var i, index, item, itr, len;
    console.log("remove item");
    console.log(list);
    console.log(id);
    itr = 0;
    for (i = 0, len = list.length; i < len; i++) {
      item = list[i];
      if ((item != null) && (item === id)) {
        index = itr;
        break;
      }
      itr++;
    }
    console.log("iterator is ", itr);
    console.log("index is", index);
    delete list[index];
    return list[index] = null;
  };

  PostServer = function(baseUrl, config) {
    return needle.postAsync(baseUrl + "/HAProxy", config, {
      json: true
    }).then((function(_this) {
      return function(resp) {
        console.log("statuscode: ", resp[0].statusCode);
        if (resp[0].statusCode !== 200) {
          throw new Error('invalidStatusCode');
        }
        return resp[1].id;
      };
    })(this))["catch"]((function(_this) {
      return function(err) {
        throw err;
      };
    })(this));
  };

  DeleteServer = function(baseUrl, instanceid) {
    return needle.deleteAsync(baseUrl + ("/HAProxy/" + instanceid), {
      json: true
    }).then((function(_this) {
      return function(resp) {
        if (resp[0].statusCode !== 204) {
          throw new Error('invalidStatusCode');
        }
        return instanceid;
      };
    })(this))["catch"]((function(_this) {
      return function(err) {
        throw err;
      };
    })(this));
  };

  PutServer = function(baseUrl, config, instanceid) {
    return needle.putAsync(baseUrl + ("/HAProxy/" + instanceid), config, {
      json: true
    }).then((function(_this) {
      return function(resp) {
        if (resp[0].statusCode !== 200) {
          throw new Error('invalidStatusCode');
        }
        return config;
      };
    })(this))["catch"]((function(_this) {
      return function(err) {
        throw err;
      };
    })(this));
  };

  Start = function(context) {
    var config, configObj, ref, ref1;
    if (!(context.bInstalledPackages && context.service.name)) {
      throw new Error('HAProxy-storm.Start missingParams');
    }
    if ((context.instances != null) && ((ref = context.instances) != null ? ref.length : void 0) > 0) {
      return context;
    }
    if (context.instances == null) {
      context.instances = [];
    }
    configObj = (ref1 = context.service.factoryConfig) != null ? ref1.config : void 0;
    config = configObj[context.service.name];
    return getPromise().then((function(_this) {
      return function(resp) {
        return PostServer(context.baseUrl, config);
      };
    })(this)).then((function(_this) {
      return function(resp) {
        console.log(resp);
        context.instances.push(resp);
        return context;
      };
    })(this))["catch"]((function(_this) {
      return function(err) {
        throw err;
      };
    })(this));
  };

  Stop = function(context) {
    var instances, ref;
    if (!(context.instances && ((ref = context.instances) != null ? ref.length : void 0) > 0)) {
      throw new Error('HAProxy-storm.Stop missingParams');
    }
    instances = context.instances;
    return getPromise().then((function(_this) {
      return function(resp) {
        return DeleteServer(context.baseUrl, instances[0]);
      };
    })(this)).then((function(_this) {
      return function(resp) {
        removeItem(instances, resp);
        return context;
      };
    })(this))["catch"]((function(_this) {
      return function(err) {
        throw err;
      };
    })(this));
  };

  Update = function(context) {
    var config, configObj, instance;
    if (!(context.bInstalledPackages && context.service.name && context.policyConfig)) {
      throw new Error('HAProxy-storm.Stop missingParams');
    }
    configObj = context.policyConfig;
    config = configObj[context.service.name];
    if (utils.isEmpty(config)) {
      throw new Error('config is missing');
    }
    if (!((context.instances != null) || !utils.isEmpty(context.instances) || context.instances[0] !== null)) {
      throw new Error('Instance not found');
    }
    instance = context.instances[0];
    return getPromise().then((function(_this) {
      return function(resp) {
        return PutServer(context.baseUrl, config, instance);
      };
    })(this)).then((function(_this) {
      return function(resp) {
        return context;
      };
    })(this))["catch"]((function(_this) {
      return function(err) {
        throw err;
      };
    })(this));
  };

  Validate = function(config) {
    var chk;
    if (config == null) {
      throw new Error("HAProxy-storm.Validate - invalid input");
    }
    if ((config != null) && !utils.isEmpty(config)) {
      chk = validate(config, schema_HAProxy);
      console.log('HAProxy validate result ', chk);
      if (!chk.valid) {
        throw new Error("HAProxy schema check failed" + chk.valid);
        return false;
      } else {
        return true;
      }
    }
  };

  module.exports.start = Start;

  module.exports.stop = Stop;

  module.exports.update = Update;

}).call(this);
