// Generated by CoffeeScript 1.10.0
(function() {
  var HAProxyService, StormService, fs, merge,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  StormService = require('stormservice');

  merge = require('fmerge');

  fs = require('fs');

  HAProxyService = (function(superClass) {
    extend(HAProxyService, superClass);

    HAProxyService.prototype.invocation = {
      name: 'haproxy',
      path: '/usr/sbin',
      monitor: true,
      args: [],
      options: {
        detached: true,
        stdio: ["ignore", -1, -1]
      }
    };

    function HAProxyService(id, data, opts) {
      if (data.instance != null) {
        this.instance = data.instance;
        delete data.instance;
      }
      if (opts == null) {
        opts = {};
      }
      if (opts.configPath == null) {
        opts.configPath = "/var/stormflash/plugins/haproxy";
      }
      if (opts.logPath == null) {
        opts.logPath = "/var/log/haproxy";
      }
      HAProxyService.__super__.constructor.call(this, id, data, opts);
      this.configs = {
        service: {
          filename: this.configPath + "/" + this.id + ".conf"
        }
      };
      this.invocation = merge(this.invocation, {
        args: ["-d", "-f", "" + this.configs.service.filename],
        options: {
          stdio: ["ignore", this.out, this.err]
        }
      });
      this.configs.service.generator = (function(_this) {
        return function(callback) {
          var aa, ab, ac, ad, backend, frontend, haproxyconfig, i, ikey, ival, j, jkey, jval, k, key, keyy, kval, l, len, len1, len10, len11, len12, len13, len14, len15, len16, len17, len18, len19, len2, len20, len21, len3, len4, len5, len6, len7, len8, len9, listen, m, myarray, n, o, p, peers, q, r, ref, s, t, u, userlist, v, val, value, w, x, y, z;
          haproxyconfig = "";
          ref = _this.data;
          for (key in ref) {
            val = ref[key];
            switch (key) {
              case "global":
                haproxyconfig += 'global' + "\n";
                for (keyy in val) {
                  value = val[keyy];
                  switch (typeof value) {
                    case "string":
                    case "number":
                      haproxyconfig += '    ' + keyy + ' ' + value + '\n';
                  }
                  if (value instanceof Array) {
                    for (i = 0, len = value.length; i < len; i++) {
                      jval = value[i];
                      switch (typeof jval) {
                        case "string":
                        case "number":
                          haproxyconfig += '    ' + keyy + ' ' + jval + '\n';
                          break;
                        case "object":
                          haproxyconfig += '    ' + keyy;
                          for (ikey in jval) {
                            ival = jval[ikey];
                            haproxyconfig += ' ' + ikey + ' ' + ival;
                          }
                          haproxyconfig += '\n';
                          break;
                        default:
                          haproxyconfig += '\n';
                      }
                    }
                  }
                }
                haproxyconfig += '\n\n';
                break;
              case "frontend":
                for (j = 0, len1 = val.length; j < len1; j++) {
                  frontend = val[j];
                  for (keyy in frontend) {
                    value = frontend[keyy];
                    switch (typeof value) {
                      case "string":
                      case "number":
                        if (keyy === "name") {
                          haproxyconfig += 'frontend' + ' ' + value + '\n';
                        }
                        if (keyy !== "name") {
                          haproxyconfig += '    ' + keyy + ' ' + value + '\n';
                        }
                        break;
                      case "object":
                        haproxyconfig += "\n";
                    }
                    if (value instanceof Array) {
                      myarray = "yes";
                      for (k = 0, len2 = value.length; k < len2; k++) {
                        ival = value[k];
                        if (ival instanceof Array) {
                          haproxyconfig += "    " + keyy;
                          for (l = 0, len3 = ival.length; l < len3; l++) {
                            kval = ival[l];
                            haproxyconfig += " " + kval;
                          }
                          haproxyconfig += "\n";
                        }
                        haproxyconfig += "\n";
                        if (keyy === "bind") {
                          haproxyconfig += "    " + keyy;
                          for (jkey in ival) {
                            jval = ival[jkey];
                            switch (jkey) {
                              case "servername":
                                haproxyconfig += " " + jval;
                                break;
                              case "port":
                                haproxyconfig += ":" + jval;
                                break;
                              case "options":
                                haproxyconfig += " " + jval + "\n";
                            }
                          }
                        }
                        if (keyy === "use_backend") {
                          for (jkey in ival) {
                            jval = ival[jkey];
                            for (m = 0, len4 = jval.length; m < len4; m++) {
                              kval = jval[m];
                              haproxyconfig += "    " + keyy + " " + jkey + " " + kval + "\n";
                            }
                          }
                        }
                        if (value instanceof Array) {
                          switch (typeof ival) {
                            case "string":
                            case "number":
                              if (myarray === "yes") {
                                haproxyconfig += '    ' + keyy;
                              }
                              haproxyconfig += ' ' + ival;
                              myarray = "no";
                          }
                        }
                      }
                      haproxyconfig += "\n";
                    }
                  }
                }
                haproxyconfig += '\n\n';
                break;
              case "backend":
                for (n = 0, len5 = val.length; n < len5; n++) {
                  backend = val[n];
                  for (keyy in backend) {
                    value = backend[keyy];
                    switch (typeof value) {
                      case "string":
                      case "number":
                        if (keyy === "name") {
                          haproxyconfig += 'backend' + ' ' + value + '\n';
                        }
                        if (keyy !== "name") {
                          haproxyconfig += '    ' + keyy + ' ' + value + '\n';
                        }
                        break;
                      case "object":
                        haproxyconfig += "\n";
                    }
                    if (value instanceof Array) {
                      myarray = "yes";
                      for (o = 0, len6 = value.length; o < len6; o++) {
                        ival = value[o];
                        if (ival instanceof Array) {
                          haproxyconfig += "    " + keyy;
                          for (p = 0, len7 = ival.length; p < len7; p++) {
                            jval = ival[p];
                            haproxyconfig += " " + jval;
                          }
                          haproxyconfig += "\n";
                        }
                        if (keyy === "server") {
                          haproxyconfig += "    " + keyy;
                          for (jkey in ival) {
                            jval = ival[jkey];
                            switch (jkey) {
                              case "servername":
                                haproxyconfig += " " + jval;
                                break;
                              case "serverIP":
                                haproxyconfig += " " + jval;
                                break;
                              case "port":
                                haproxyconfig += ":" + jval;
                                break;
                              default:
                                haproxyconfig += " " + jkey + " " + jval;
                            }
                          }
                          haproxyconfig += "\n";
                        }
                        if (value instanceof Array) {
                          switch (typeof ival) {
                            case "string":
                            case "number":
                              if (myarray === "yes") {
                                haproxyconfig += '    ' + keyy + ' ' + ival;
                              }
                              if (myarray !== "yes") {
                                haproxyconfig += ' ' + ival;
                              }
                              myarray = "no";
                          }
                        }
                      }
                      haproxyconfig += "\n";
                    }
                  }
                }
                haproxyconfig += "\n\n";
                break;
              case "defaults":
                haproxyconfig += 'defaults' + "\n";
                for (keyy in val) {
                  value = val[keyy];
                  switch (typeof value) {
                    case "string":
                    case "number":
                      haproxyconfig += ' ' + keyy + ' ' + value + '\n';
                      break;
                    case "object":
                      haproxyconfig += "\n";
                  }
                  if (value instanceof Array) {
                    if (keyy === "log") {
                      for (q = 0, len8 = value.length; q < len8; q++) {
                        val = value[q];
                        haproxyconfig += ' ' + keyy + ' ' + val + '\n';
                      }
                    }
                    if (keyy === "stats") {
                      haproxyconfig += ' ' + keyy;
                      for (ival = r = 0, len9 = value.length; r < len9; ival = ++r) {
                        ikey = value[ival];
                        haproxyconfig += ' ' + ikey + ' ' + ival;
                      }
                      haproxyconfig += "\n";
                    }
                    if (keyy === "use_backend") {
                      for (s = 0, len10 = value.length; s < len10; s++) {
                        ival = value[s];
                        for (jkey in ival) {
                          jval = ival[jkey];
                          for (t = 0, len11 = jval.length; t < len11; t++) {
                            kval = jval[t];
                            haproxyconfig += " " + keyy + " " + jkey + " " + kval + "\n";
                          }
                        }
                      }
                    }
                    if (keyy === "bind") {
                      haproxyconfig += " " + keyy;
                      for (u = 0, len12 = value.length; u < len12; u++) {
                        ival = value[u];
                        for (jkey in ival) {
                          jval = ival[jkey];
                          switch (jkey) {
                            case "servername":
                              haproxyconfig += " " + jval;
                              break;
                            case "port":
                              haproxyconfig += ":" + jval;
                              break;
                            case "options":
                              haproxyconfig += " " + jval + "\n";
                          }
                        }
                      }
                    }
                  }
                }
                haproxyconfig += "\n\n";
                break;
              case "peers":
              case "mailers":
                for (v = 0, len13 = val.length; v < len13; v++) {
                  peers = val[v];
                  for (keyy in peers) {
                    value = peers[keyy];
                    switch (typeof value) {
                      case "string":
                      case "number":
                        if (keyy === "name") {
                          haproxyconfig += key + ' ' + value + '\n';
                        }
                        if (keyy !== "name") {
                          haproxyconfig += ' ' + keyy + ' ' + value + '\n';
                        }
                        break;
                      case "object":
                        haproxyconfig += "\n";
                    }
                    if (value instanceof Array) {
                      if (keyy === "peer" || "mailer") {
                        for (w = 0, len14 = value.length; w < len14; w++) {
                          ival = value[w];
                          haproxyconfig += "    " + keyy;
                          for (jkey in ival) {
                            jval = ival[jkey];
                            switch (jkey) {
                              case "servername":
                                haproxyconfig += " " + jval;
                                break;
                              case "serverIP":
                                haproxyconfig += " " + jval;
                                break;
                              case "port":
                                haproxyconfig += ":" + jval;
                                break;
                              default:
                                haproxyconfig += " " + jkey + " " + jval;
                            }
                          }
                          haproxyconfig += "\n";
                        }
                        haproxyconfig += "\n";
                      }
                    }
                  }
                }
                break;
              case "userlist":
                for (x = 0, len15 = val.length; x < len15; x++) {
                  userlist = val[x];
                  for (keyy in userlist) {
                    value = userlist[keyy];
                    switch (typeof value) {
                      case "string":
                      case "number":
                        if (keyy === "name") {
                          haproxyconfig += 'userlist' + ' ' + value + '\n';
                        }
                        if (keyy !== "name") {
                          haproxyconfig += ' ' + keyy + ' ' + value + '\n';
                        }
                        break;
                      case "object":
                        haproxyconfig += "\n";
                    }
                    if (value instanceof Array) {
                      if (keyy === "user" || "group") {
                        for (y = 0, len16 = value.length; y < len16; y++) {
                          ival = value[y];
                          haproxyconfig += "    " + keyy;
                          for (z = 0, len17 = ival.length; z < len17; z++) {
                            kval = ival[z];
                            haproxyconfig += " " + kval;
                          }
                          haproxyconfig += "\n";
                        }
                        haproxyconfig += "\n";
                      }
                    }
                  }
                }
                break;
              case "listen":
                for (aa = 0, len18 = val.length; aa < len18; aa++) {
                  listen = val[aa];
                  for (keyy in listen) {
                    value = listen[keyy];
                    switch (typeof value) {
                      case "string":
                      case "number":
                        if (keyy === "name") {
                          haproxyconfig += 'listen' + ' ' + value + '\n';
                        }
                        if (keyy !== "name") {
                          haproxyconfig += ' ' + keyy + ' ' + value + '\n';
                        }
                        break;
                      case "object":
                        haproxyconfig += "\n";
                    }
                    if (value instanceof Array) {
                      if (keyy === "bind") {
                        haproxyconfig += " " + keyy;
                        for (ab = 0, len19 = value.length; ab < len19; ab++) {
                          ival = value[ab];
                          for (jkey in ival) {
                            jval = ival[jkey];
                            switch (jkey) {
                              case "servername":
                                haproxyconfig += " " + jval;
                                break;
                              case "port":
                                haproxyconfig += ":" + jval;
                                break;
                              case "options":
                                haproxyconfig += " " + jval + "\n";
                            }
                          }
                        }
                      }
                    }
                    if (keyy === "use_backend") {
                      for (ac = 0, len20 = value.length; ac < len20; ac++) {
                        ival = value[ac];
                        for (jkey in ival) {
                          jval = ival[jkey];
                          for (ad = 0, len21 = jval.length; ad < len21; ad++) {
                            kval = jval[ad];
                            haproxyconfig += " " + keyy + " " + jkey + " " + kval + "\n";
                          }
                        }
                      }
                    }
                  }
                }
                haproxyconfig += "\n\n";
                break;
              default:
                haproxyconfig += "";
            }
          }
          return callback(haproxyconfig);
        };
      })(this);
    }

    HAProxyService.prototype.update = function(newconfig, callback) {
      this.data = newconfig;
      return this.generate(callback);
    };

    HAProxyService.prototype.destructor = function() {
      this.eliminate();
      return this.emit('destroy');
    };

    return HAProxyService;

  })(StormService);

  module.exports = HAProxyService;

}).call(this);
