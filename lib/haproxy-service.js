// Generated by CoffeeScript 1.10.0
(function() {
  var HAProxyService, Schema, StormService, fs, merge,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  StormService = require('stormservice');

  merge = require('fmerge');

  fs = require('fs');

  Schema = require('./schema');

  HAProxyService = (function(superClass) {
    extend(HAProxyService, superClass);

    HAProxyService.prototype.invocation = {
      name: 'haproxy',
      path: '/usr/sbin',
      monitor: true,
      args: [],
      options: {
        detached: true,
        stdio: ["ignore", -1, -1]
      }
    };

    function HAProxyService(id, data, opts) {
      if (data.instance != null) {
        this.instance = data.instance;
        delete data.instance;
      }
      this.schema = Schema;
      if (opts == null) {
        opts = {};
      }
      if (opts.configPath == null) {
        opts.configPath = "/var/stormflash/plugins/HAProxy";
      }
      if (opts.logPath == null) {
        opts.logPath = "/var/log/HAProxy";
      }
      HAProxyService.__super__.constructor.call(this, id, data, opts);
      this.configs = {
        service: {
          filename: this.configPath + "/haproxy_" + this.id + ".conf"
        }
      };
      this.invocation = merge(this.invocation, {
        args: ["-f " + this.configs.service.filename],
        options: {
          stdio: ["ignore", this.out, this.err]
        }
      });
      this.configs.service.generator = (function(_this) {
        return function(callback) {
          var frontent, haproxyconfig, i, key, keyy, len, ref, val, value;
          haproxyconfig = "";
          ref = _this.data;
          for (key in ref) {
            val = ref[key];
            switch (key) {
              case "global":
                haproxyconfig += 'global' + "\n";
                for (keyy in val) {
                  value = val[keyy];
                  switch (typeof value) {
                    case "string":
                    case "number":
                      haproxyconfig += ' ' + keyy + ' ' + value + "\n";
                      break;
                    case "object":
                      haproxyconfig += "\n";
                  }
                }
                break;
              case "frontends":
                for (i = 0, len = frontends.length; i < len; i++) {
                  frontent = frontends[i];
                  for (keyy in val) {
                    value = val[keyy];
                    switch (typeof value) {
                      case "string":
                      case "number":
                        if (keyy === name) {
                          haproxyconfig += 'frontend' + ' ' + value(+"\n");
                        }
                        if (keyy !== name) {
                          haproxyconfig += ' ' + keyy + ' ' + value + "\n";
                        }
                        break;
                      case "object":
                        haproxyconfig += "\n";
                    }
                  }
                }
                break;
              case "backends":
                haproxyconfig += "";
                break;
              case "defaults":
                haproxyconfig += "\n";
                break;
              case "listen":
                haproxyconfig += "\n";
                break;
              default:
                haproxyconfig += "\n";
            }
          }
          return callback(haproxyconfig);
        };
      })(this);
    }

    HAProxyService.prototype.update = function(newconfig, callback) {
      this.data = newconfig;
      return this.generate(callback);
    };

    HAProxyService.prototype.destructor = function() {
      this.eliminate();
      return this.emit('destroy');
    };

    return HAProxyService;

  })(StormService);

  module.exports = HAProxyService;

}).call(this);
