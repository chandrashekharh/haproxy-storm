// Generated by CoffeeScript 1.9.3
var HAProxyRegistry, HAProxyService, StormData, StormRegistry,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

StormRegistry = require('stormregistry');

StormData = require('stormdata');

HAProxyService = require('./HAProxy-service');

HAProxyRegistry = (function(superClass) {
  extend(HAProxyRegistry, superClass);

  function HAProxyRegistry(filename) {
    this.on('load', function(key, val) {
      var entry;
      console.log("restoring " + key + " with:", val);
      entry = new HAProxyService(key, val);
      if (entry != null) {
        entry.saved = true;
        return this.add(entry);
      }
    });
    this.on('removed', function(entry) {
      if (entry.destructor != null) {
        return entry.destructor();
      }
    });
    HAProxyRegistry.__super__.constructor.call(this, filename);
  }

  HAProxyRegistry.prototype.add = function(service) {
    var entry;
    if (!(service instanceof HAProxyService)) {
      return;
    }
    entry = HAProxyRegistry.__super__.add.call(this, service.id, service);
    return entry.on("running", (function(_this) {
      return function(instance) {
        if (entry.instance !== instance) {
          entry.instance = instance;
          return _this.update(entry);
        }
      };
    })(this));
  };

  HAProxyRegistry.prototype.update = function(service) {
    service.data.instance = service.instance;
    HAProxyRegistry.__super__.update.call(this, service.id, service);
    return delete service.data.instance;
  };

  HAProxyRegistry.prototype.get = function(key) {
    var entry;
    entry = HAProxyRegistry.__super__.get.call(this, key);
    if (entry == null) {
      return;
    }
    if ((entry.data != null) && entry.data instanceof HAProxyService) {
      entry.data.id = entry.id;
      return entry.data;
    } else {
      return entry;
    }
  };

  return HAProxyRegistry;

})(StormRegistry);

module.exports = HAProxyRegistry;
